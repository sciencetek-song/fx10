────────────────────────────────────────────────────────────────────────────────
✓✔✕❌✅❎➕➖➗🧮🔍📌🖼❓ℹ️💡
────────────────────────────────────────────────────────────────────────────────
📌 로컬 저장소 (Local Repository) : 
	문서화와 코딩 행위가 일어나는 자신의 컴퓨터로 github가 제공하는 원격 저장소를 통해서 
	프로젝트를 유통시키고 협업할 수 있다. 내 PC에 파일이 저장되는 개인 전용 저장소
	
📌 원격 저장소 ( Remote Repository) : Git의 목적은 파일 공유와 버전 관리이다. 
	원격 서버에 저장되어 관리되는 저장소이며, 파일이 원격 저장소 전용 서버에서 관리되면 
	여러 사람이 함께 공유하기 위한 저장소이다.
	평소에는 내 PC의 로컬저장소에서 작업하다가 작업한 내용을 다른 사람들에게 공개하고 싶을 때 
	원격 저장소에 업로드한다.

────────────────────────────────────────────────────────────────────────────────
	이슈(Issue)는 깃허브에서 작업 관리·버그 보고·질문·아이디어 제안 등을 기록하고 관리하는 
	기본 단위라고 보면 됩니다.
	🔎 정리하면:
		버그 보고 : 프로그램 실행 중 오류가 났을 때 기록.
		기능 요청 : “이런 기능이 추가되면 좋겠다” 제안.
		질문/논의 : 프로젝트와 관련된 질문이나 토론 주제.
		작업 관리 : 해야 할 일(To-Do) 관리.
	👉 New Issue 버튼을 누르면 제목/내용/라벨 등을 적는 입력창이 나오고, 등록하면 프로젝트의 Issue 탭에 새로 기록됩니다.
	개발자들끼리 협업할 때 버그 추적기(Bug Tracker)나 칸반보드(Trello 같은 것)처럼 사용하는 거죠.
────────────────────────────────────────────────────────────────────────────────
✅  1.로그인을 한다	
	2.로그인 화면에서 오른쪽 상단에 있는 + 버튼 클릭 > New repository 클릭
		New Issue:
		New repository : 새로운 저장소 만들기
		Import repository : 저장소 가져오기
		New codespace : 클라우드에 호스팅되는개발환경. 
		New gist : 저장소는 큰 단위의 폴더이고 여러가지 코드를 모아누다. 코드 조각을 올리고 싶을 때 사용한다.
		New organization : 리포지토리에세분화된 액세스 권한을 적용. ex) 학교 팀 프로젝트
		New project : 스프레드시트처럼 구축된 프로젝트 테이블은 이슈 및 풀 리퀘스트를 필터링, 정렬 및 그룹화할 수 있는 라이브 캔버스를 제공 ex) 노션

	3. Repository name을 작성 후 저장소 생성
		저는 로컬 저장소와 동일한 이름으로 작성하였습니다.
		- Description : 리포지터리에 대한 설명
		- public / private : 리포지터리 공개 여부
		- Add a README file : README 파일 생성여부. 소스코드가 무엇을 하는지, 리포지터리를 사용하는 방법, 오픈소스 저작권 등을 작성해 둔다.
		- Add .gitignore : 여러 옵션들이 있다. 깃에 add 를 할 경우 원하지 않는 파일들은 업로드 하지않는다.
			ex) 비밀키가 있어서 노출이 되면 않되는 파일 또는 프로젝트를 할때 외부 라이브러리를 사용하는데 이 라이브러리는 깃 헙에 업로드할 필요가 없는경우 등
		- Choose a licence : 라이센스는 다른사람에게 코드를 사용할 수 있는것과 없는 것을 알려준다.
		생성을 누른 후 email과 관련된 화면이 나타난다면 이메일 인증을 진행하시면 됩니다

	4. Quick setup이 나타납니다.
		다음 단계는 Quick setup을 통해 로컬 저장소와 연결합니다.
		현재 로컬 저장소와 원격 저장소를 생성만 되어있는 상태입니다.
		그래서 로컬 저장소에 원격 저장소를 연결시켜주어야합니다

		
		4-1. git bash를 실행한 후 로컬 저장소에 접속합니다.
		     e:/myGit/fx0 을 만들었다.
			 cd e:/myGit/fx10 으로 진입한다.

		4-2. git init 를 실행
		
		4-3. git remote add origin https://github.com/sciencetek-song/fx10.git
		
		git add .  # 현재 폴더의 모든 파일 추가
		
		git config --global user.name "ziontek"
		git config --global user.email "sciencetek-song@nate.com"
		
		git commit -m "first"
		git branch -M main 
		
		git push origin master //  로컬파일 업로드
────────────────────────────────────────────────────────────────────────────────
✅	원격 저장소 → 로컬로 복사(clone)	
	예를 들어 GitHub에
	https://github.com/sciencetek-song/fx10.git 이 저장소가 있다면:
		cd /path/to/workspace   # 원하는 작업 폴더로 이동
		git clone https://github.com/sciencetek-song/fx10.git
		cd fx10

	이러면:
		fx10 이라는 폴더가 생기고
		안에 GitHub 저장소의 내용이 그대로 복제됩니다
		원격 저장소(origin)도 자동으로 연결돼 있어, 이후 git pull, git push 가능
		🔹 원격 변경사항만 가져오기 (이미 로컬 저장소가 있을 때)
		이미 프로젝트 폴더가 있고 .git 도 연결돼 있다면:
			
			git pull origin main
	👉 GitHub의 main 브랜치 최신 내용을 로컬에 가져와 병합합니다.
	(master 브랜치일 수도 있으니 GitHub에서 확인 필요)

	🔹 정리
		새로 내려받기 → git clone <url>
		이미 로컬 저장소가 있을 때 갱신 → git pull origin main		
		
		
		
		
		

